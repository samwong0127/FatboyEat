version: "3.3"

networks:
  default:
    name: project_gp5
  monitoring:
    driver: bridge
  elk:
    driver: bridge

volumes:
  mongo_volume:
    name: mongo_vol
  prometheus_data: {}
  grafana_data: {}
  elasticsearch:

services:
  nginx:
    image: nginx
    container_name: nginx
    volumes:
      # - ./nginx/config/default.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/config:/etc/nginx/conf.d
      - ./nginx/log:/var/log/nginx
    command: /bin/bash -c "nginx -g 'daemon off;'" 
    ports:
      - 20080:80
    depends_on:
      - menu
      - order
      - store
      - mongo1_menu
      - mongo2_menu
      - mongo3_menu
      - mongo1_order
      - mongo2_order
      - mongo3_order
      - mongo1_store
      - mongo2_store
      - mongo3_store
      - prometheus
    networks:
      - elk
      - monitoring

  store:
    build: ./store
    depends_on:
      - mongo1_store
      - mongo2_store
      - mongo3_store
    restart: always
    environment:
      # MONGODB_DATABASE: 
      MONGODB_USERNAME: store
      MONGODB_PASSWORD: 12345
      MONGO_SERVER_HOST: db1_store
      MONGO_SERVER_PORT: '27017'
    # volumes:
    #   - ./store:/store
    ports:
      - "15002:15002"
    container_name: api_store
    networks:
      - elk
      - monitoring

  order:
    build: ./order
    depends_on:
      - mongo1_order
      - mongo2_order
      - mongo3_order
    restart: always
    environment:
      # MONGODB_DATABASE: 
      MONGODB_USERNAME: order
      MONGODB_PASSWORD: 12345
      MONGO_SERVER_HOST: db1_order
      MONGO_SERVER_PORT: '27018'
    # volumes:
    #  - ./order:/order
    ports:
      - "15001:15001"
    container_name: api_order
    networks:
      - elk
      - monitoring
    
  menu:
    build: ./menu
    depends_on:
      - mongo1_menu
      - mongo2_menu
      - mongo3_menu
    restart: always
    environment:
      MONGODB_USERNAME: menu
      MONGODB_PASSWORD: 12345
      MONGO_SERVER_HOST: db1_menu
      MONGO_SERVER_PORT: '27019'
    # links:
    #   - mongo_menu
    # volumes:
    #     - ./menu:/menu
    ports:
      - "15000:15000"
    container_name: api_menu
    networks:
      - elk
      - monitoring

  # Store db
  mongo_store_setup:
    container_name: mongo_store_setup
    image: mongo
    restart: on-failure
    networks:
      - elk
      - monitoring
    volumes:
      - ./store/scripts/setup.sh:/store/scripts/setup.sh
    entrypoint: [ "sh", "/store/scripts/setup.sh" ] 
    environment:
      MONGO_INITDB_ROOT_USERNAME: store
      MONGO_INITDB_ROOT_PASSWORD: 12345
    depends_on:
      - mongo1_store
      - mongo2_store
      - mongo3_store

  mongo1_store:
    image: mongo
    hostname: mongo1_store
    container_name: db1_store
    expose:
      - 27017
    ports:
      - 27017:27017
    restart: always
    command: ["--keyFile", "/auth/file.key","--replSet", "rs0_store", "--bind_ip_all","--auth"]
    environment:
      MONGO_INITDB_ROOT_USERNAME: store
      MONGO_INITDB_ROOT_PASSWORD: 12345
      MONGO_INITDB_DATABASE: admin
      MONGO_REPLICA_SET_NAME: rs0_store
    volumes:
      - ./store/data1/mongo-store-init.js:/docker-entrypoint-initdb.d/mongo-store-init.js
      - mongo_volume:/data/db_store
      - ./store/file.key:/auth/file.key
    networks:
      - elk
      - monitoring

  mongo2_store:
    image: mongo
    hostname: mongo2_store
    container_name: db2_store
    expose:
      - 27017
    ports:
      - 27027:27017
    restart: always
    command: ["--keyFile", "/auth/file.key","--replSet", "rs0_store", "--bind_ip_all","--auth"]
    environment:
      MONGO_INITDB_ROOT_USERNAME: store
      MONGO_INITDB_ROOT_PASSWORD: 12345
      MONGO_INITDB_DATABASE: admin
      MONGO_REPLICA_SET_NAME: rs0_store
    volumes:
      - ./store/data2/mongo-store-init.js:/docker-entrypoint-initdb.d/mongo-store-init.js
      - mongo_volume:/data/db_store
      - ./store/file.key:/auth/file.key
    networks:
      - elk
      - monitoring

  mongo3_store:
    image: mongo
    hostname: mongo3_store
    container_name: db3_store
    expose:
      - 27017
    ports:
      - 27037:27017
    restart: always
    command: ["--keyFile", "/auth/file.key","--replSet", "rs0_store", "--bind_ip_all","--auth"]
    environment:
      MONGO_INITDB_ROOT_USERNAME: store
      MONGO_INITDB_ROOT_PASSWORD: 12345
      MONGO_INITDB_DATABASE: admin
      MONGO_REPLICA_SET_NAME: rs0_store
    volumes:
      - ./store/data3/mongo-store-init.js:/docker-entrypoint-initdb.d/mongo-store-init.js
      - mongo_volume:/data/db_store
      - ./store/file.key:/auth/file.key
    networks:
      - elk
      - monitoring

   
  # Order db 
  mongo_order_setup:
    container_name: mongo_order_setup
    image: mongo
    restart: on-failure
    networks:
      - elk
      - monitoring
    volumes:
      - ./order/scripts/setup.sh:/order/scripts/setup.sh
    entrypoint: [ "sh", "/order/scripts/setup.sh" ] 
    environment:
      MONGO_INITDB_ROOT_USERNAME: order 
      MONGO_INITDB_ROOT_PASSWORD: 12345
    depends_on:
      - mongo1_order
      - mongo2_order
      - mongo3_order

  mongo1_order:
    image: mongo
    hostname: mongo1_order
    container_name: db1_order
    expose:
      - 27017
    ports:
      - 27018:27017
    restart: always
    command: ["--keyFile", "/auth/file.key","--replSet", "rs0_order", "--bind_ip_all","--auth"]
    environment:
      MONGO_INITDB_ROOT_USERNAME: order
      MONGO_INITDB_ROOT_PASSWORD: 12345
      MONGO_INITDB_DATABASE: admin
      MONGO_REPLICA_SET_NAME: rs0_order
    volumes:
      - ./order/data1/mongo-order-init.js:/docker-entrypoint-initdb.d/mongo-order-init.js
      - mongo_volume:/data/db_order
      - ./order/file.key:/auth/file.key
    networks:
      - elk
      - monitoring
  mongo2_order:
    image: mongo
    hostname: mongo2_order
    container_name: db2_order
    expose:
      - 27017
    ports:
      - 27028:27017
    restart: always
    command: ["--keyFile", "/auth/file.key","--replSet", "rs0_order", "--bind_ip_all","--auth"]
    environment:
      MONGO_INITDB_ROOT_USERNAME: order
      MONGO_INITDB_ROOT_PASSWORD: 12345
      MONGO_INITDB_DATABASE: admin
      MONGO_REPLICA_SET_NAME: rs0_order
    volumes:
      - ./order/data2/mongo-order-init.js:/docker-entrypoint-initdb.d/mongo-order-init.js
      - mongo_volume:/data/db_order
      - ./order/file.key:/auth/file.key
    networks:
      - elk
      - monitoring
  mongo3_order:
    image: mongo
    hostname: mongo3_order
    container_name: db3_order
    expose:
      - 27017
    ports:
      - 27038:27017
    restart: always
    command: ["--keyFile", "/auth/file.key","--replSet", "rs0_order", "--bind_ip_all","--auth"]
    # entrypoint: [ "/usr/bin/mongod", "--bind_ip_all",   "--replSet", "rs0" ]
    environment:
      MONGO_INITDB_ROOT_USERNAME: order
      MONGO_INITDB_ROOT_PASSWORD: 12345
      MONGO_INITDB_DATABASE: admin
      MONGO_REPLICA_SET_NAME: rs0_order
    volumes:
      - ./order/data3/mongo-order-init.js:/docker-entrypoint-initdb.d/mongo-order-init.js
      - mongo_volume:/data/db_order
      - ./order/file.key:/auth/file.key
    networks:
      - elk
      - monitoring
    
  
  # Menu db
  mongo_menu_setup:
    container_name: mongo_menu_setup
    image: mongo
    restart: on-failure
    networks:
      - elk
      - monitoring
    volumes:
      - ./menu/scripts/setup.sh:/menu/scripts/setup.sh
    entrypoint: [ "sh", "/menu/scripts/setup.sh" ] 
    environment:
      MONGO_INITDB_ROOT_USERNAME: menu  
      MONGO_INITDB_ROOT_PASSWORD: 12345
    depends_on:
      - mongo1_menu
      - mongo2_menu
      - mongo3_menu

  mongo1_menu:
    image: mongo
    hostname: mongo1_menu
    container_name: db1_menu
    expose:
      - 27017
    ports:
      - 27019:27017
    restart: always
    command: ["--keyFile", "/auth/file.key","--replSet", "rs0_menu", "--bind_ip_all","--auth"]
    environment:
      MONGO_INITDB_ROOT_USERNAME: menu
      MONGO_INITDB_ROOT_PASSWORD: 12345
      MONGO_INITDB_DATABASE: admin
      MONGO_REPLICA_SET_NAME: rs0_menu
    volumes:
      - ./menu/data1/mongo-menu-init.js:/docker-entrypoint-initdb.d/mongo-menu-init.js
      - mongo_volume:/data/db_menu
      - ./menu/file.key:/auth/file.key
    networks:
      - elk
      - monitoring
  mongo2_menu:
    image: mongo
    hostname: mongo2_menu
    container_name: db2_menu
    expose:
      - 27017
    ports:
      - 27029:27017
    restart: always
    command: ["--keyFile", "/auth/file.key","--replSet", "rs0_menu", "--bind_ip_all","--auth"]
    environment:
      MONGO_INITDB_ROOT_USERNAME: menu
      MONGO_INITDB_ROOT_PASSWORD: 12345
      MONGO_INITDB_DATABASE: admin
      MONGO_REPLICA_SET_NAME: rs0_menu
    volumes:
      - ./menu/data2/mongo-menu-init.js:/docker-entrypoint-initdb.d/mongo-menu-init.js
      - mongo_volume:/data/db_menu
      - ./menu/file.key:/auth/file.key
    networks:
      - elk
      - monitoring

  mongo3_menu:
    image: mongo
    hostname: mongo3_menu
    container_name: db3_menu
    expose:
      - 27017
    ports:
      - 27039:27017
    restart: always
    # entrypoint: [ "mongod", "--bind_ip_all", "--replSet", "rs0" ]
    command: ["--keyFile", "/auth/file.key","--replSet", "rs0_menu", "--bind_ip_all","--auth"]
    # entrypoint: [ "/usr/bin/mongod", "--bind_ip_all",   "--replSet", "rs0" ]
    environment:
      MONGO_INITDB_ROOT_USERNAME: menu
      MONGO_INITDB_ROOT_PASSWORD: 12345
      MONGO_INITDB_DATABASE: admin
      MONGO_REPLICA_SET_NAME: rs0_menu
    volumes:
      - ./menu/data3/mongo-menu-init.js:/docker-entrypoint-initdb.d/mongo-menu-init.js
      - mongo_volume:/data/db_menu
      - ./menu/file.key:/auth/file.key
    networks:
      - elk
      - monitoring

  elasticsearch:
    build:
      context: elasticsearch/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - type: bind
        source: ./elasticsearch/config/elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
        read_only: true
      - type: volume
        source: elasticsearch
        target: /usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      ELASTIC_PASSWORD: changeme
    networks:
      - elk

  logstash:
    build:
      context: logstash/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - type: bind
        source: ./logstash/config/logstash.yml
        target: /usr/share/logstash/config/logstash.yml
        read_only: true
      - type: bind
        source: ./logstash/pipeline
        target: /usr/share/logstash/pipeline
        read_only: true
    ports:
      - "5000:5000"
      - "9600:9600"
    expose: 
      - "5044"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - elk
    depends_on:
      - elasticsearch

  kibana:
    build:
      context: kibana/
      args:
        ELK_VERSION: $ELK_VERSION
    volumes:
      - type: bind
        source: ./kibana/config/kibana.yml
        target: /usr/share/kibana/config/kibana.yml
        read_only: true
    ports:
      - "5601:5601"
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - elk
    depends_on:
      - elasticsearch

  filebeat:
    build: ./filebeat
    entrypoint: "filebeat -e -strict.perms=false"
    volumes:
      - ./filebeat/config/filebeat.yml:/usr/share/filebeat/filebeat.yml
      - ./nginx/log:/var/log/nginx
    networks:
      - elk
    depends_on: 
      - menu
      - store
      - order
      - nginx
      - logstash
      - elasticsearch
      - kibana
    links: 
      - logstash

  grafana:
    image: grafana/grafana
    container_name: grafana
    restart: always
    depends_on:
      - prometheus
    ports:
      - '3000:3000'
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    networks:
      - monitoring

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yaml:/etc/prometheus/prometheus.yaml
      - prometheus_data:/var/lib/prometheus
      - ./prometheus/alert_rules.yml:/etc/prometheus/alert_rules.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yaml'
    ports:
      - '9090:9090'
    networks:
      - monitoring

  alertmanager:
      image: prom/alertmanager
      container_name: alertmanagers
      ports:
        - 9093:9093
      volumes:
        - ./alertmanger/alertmanager.yml:/etc/alertmanger/alertmanager.yml
      restart: always
      command:
        - '--config.file=/etc/alertmanger/alertmanager.yml'
        - '--storage.path=/alertmanager/data'
      networks:
      - monitoring        
      